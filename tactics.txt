---- Tacticals ----
* Generalized compostion
  t1; t2; [t3 | t4 [t5 t6]]
  ; = compostion
  | = disjunction
  _ = conjunction

* or_else
  t1 || t2 || t3
  attempt t1, if fail, attempt t2, if fail... else fail
  Note : try t1 = t1 || idtac

* try (attempt or_else no-op)
  try t1 = t1 || idtac

* try solve (solve or_else no-op)
  try solve t1 = try (t1; fail)

* repeat (repeat and stop on fail)

---- Basic Tactics ----

* intros (primitive typing rule, Lam)
  move implication premises from the goal to the context

* apply/eapply (primitive typing rule, App)
  _implication elimination_ using modus ponens, chaining
  the rule to generate multiple goals for each of the
  head types of the implication chain.

* exact/eexact (direct proof)
  solve the goal by providing a valid proof term

* assumption/eassumption (proof using context)
  solve the goal using an existing context variable

* idtac (no-op)
  do nothing; useful as neutral op for multi-tacs

* fail
  fail proof; useful as ternimal op for multi-tacs

* cut [P] 
  break goal Q into goals (P -> Q) and P

* assert [P]
  break goal Q into goals P and (P -> Q)

* auto/eauto n with [a b c ...]
  recursive combo of intros/assumption/apply to depth n
  default 5. Can be enhanced to employ more tactics using
  "with", followed by one or more database names

* trivial
  weaker version of auto, for proof readibility

* unfold [id ...]
  selective delta reduction, followed by other reductions

* fold [id ...]
  selective reversal of delta reduction, useful
  for hiding messy fix constructs after delta reduction
  of recursive terms 

* split (intro rule for conjunction)
  split = intros; apply conj

* left/right (intro rules for disjunction)
  [left|right] = intros; apply [or_introl|or_intror]

* elim [t|H] (apply respective elimination rule)

* exists/eexists (intro rule for witness in existential)

* reflexivity (apply refl_equal)

* pattern/revert
  reintroduce an indentifier t into the goal statement
  pattern will construct a lambda function with input t
  revert will construct a universal quantifier (forall)

! rewrite, replace, cutrewrite, symmetry, transitivity

* case [t]
  replace all instances of inductive type t
  with all possible cases for the value of t

* discriminate
  prove a=b -> False for inductive types.
  some automation seems to be involved as well to
  resolve trivial results. 

* injection
  applies the inference on equalities based on the rule
  that constructors of inductive types are injective
  
* change
  replace the goal with an equivalent convertible 
  statement. Good for reframing a goal to allow
  for use of rewrite rules.
  - Ex: Can be used to wrap both sides of a goal
    with a cancellable pair of functions (p. 154)
  - Also great for concisely undoing simplifications
    of list appends into concats (Exercise 8.5 wp_o_head_c)

* generalize
  reintroduce an element from the context into the goal
  statement as an inference.

--- Advanced Tactics (Ch 7) ---

* induction
  like elim, but also introduces inductive
  hypotheses into the context

* destruct
  like case, but also introduces the term equality
  into the context

* lazy/cbv [beta|delta|iota|zeta]
  perform the specified reductions (see glossary).
  cbv (call by value) reduces the arguments of a
  function before reducing the body of the function.
  lazy reduces only the subexpressions needed to
  evaluate the function.

* autorewrite with [a b c...]
  repeats rewriting with give theorems,
  always applying them in the same direction.
  Can be paired with "Hint Rewrite thrm1 thrm2 : thrmx"
  to rewrite using collections of theorems

* subst [x y z]
  applies rewrite for all hypotheses of the form
  x = exp or exp = x, where x does not occur in exp,
  replacing x with exp in all other hypotheses and the
  goal. If arguments given, only those idents are replaced

* ring
  solves polynomial equations in a ring or semi-ring
  Can be adapted to any ring or semi-ring with the help of
  commands called "Add Ring" or "Add Semi Ring."

* field
  similar functionality to ring but for fields, includes division

* omega
  powerful tool for solving systems of linear equations and inequalities
  of types Z and nat.

* fourier
  similar to omega, but for reals

* tauto
  decision procedure for intuitionistic propositional logic
  unfolds negation and logical equivalence, and leverages
  tautologies of conjunction and disjunction to solve more
  goals than auto can.

* intuition [tac]
  uses the search tree built by tauto to generate a set of
  equivalent simpler subgoals. Will also apply tactic if given.